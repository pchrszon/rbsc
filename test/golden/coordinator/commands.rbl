natural type N;

impl N {
    s : [0 .. 1] init 0;

    [a] s = 0 -> (s' = 1);
}


role type R(N);

impl R {
    s : [0 .. 2] init 0;

    [a] s = 0 -> (s' = 1);
    [self.b] s = 1 -> (s' = 2);
}


system {
    n : N;
    r[2] : R;

    forall i : [0 .. 1]. r[i] boundto n;
}


coordinator {
    s : bool init false;

    [] !s & forall c. c.s = 0 -> (s' = true);
    [a] true -> true;
    [][r[0] | r[1]] !s -> true;
    [a][r[0] & r[1]] s -> true;
}
